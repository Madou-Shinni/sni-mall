// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/captcha.proto

package captcha

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Captcha service

func NewCaptchaEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Captcha service

type CaptchaService interface {
	GetCaptcha(ctx context.Context, in *GetCaptchaRequest, opts ...client.CallOption) (*GetCaptchaResponse, error)
	VerifyCaptcha(ctx context.Context, in *CaptVerifyRequest, opts ...client.CallOption) (*CaptVerifyResponse, error)
}

type captchaService struct {
	c    client.Client
	name string
}

func NewCaptchaService(name string, c client.Client) CaptchaService {
	return &captchaService{
		c:    c,
		name: name,
	}
}

func (c *captchaService) GetCaptcha(ctx context.Context, in *GetCaptchaRequest, opts ...client.CallOption) (*GetCaptchaResponse, error) {
	req := c.c.NewRequest(c.name, "Captcha.GetCaptcha", in)
	out := new(GetCaptchaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captchaService) VerifyCaptcha(ctx context.Context, in *CaptVerifyRequest, opts ...client.CallOption) (*CaptVerifyResponse, error) {
	req := c.c.NewRequest(c.name, "Captcha.VerifyCaptcha", in)
	out := new(CaptVerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Captcha service

type CaptchaHandler interface {
	GetCaptcha(context.Context, *GetCaptchaRequest, *GetCaptchaResponse) error
	VerifyCaptcha(context.Context, *CaptVerifyRequest, *CaptVerifyResponse) error
}

func RegisterCaptchaHandler(s server.Server, hdlr CaptchaHandler, opts ...server.HandlerOption) error {
	type captcha interface {
		GetCaptcha(ctx context.Context, in *GetCaptchaRequest, out *GetCaptchaResponse) error
		VerifyCaptcha(ctx context.Context, in *CaptVerifyRequest, out *CaptVerifyResponse) error
	}
	type Captcha struct {
		captcha
	}
	h := &captchaHandler{hdlr}
	return s.Handle(s.NewHandler(&Captcha{h}, opts...))
}

type captchaHandler struct {
	CaptchaHandler
}

func (h *captchaHandler) GetCaptcha(ctx context.Context, in *GetCaptchaRequest, out *GetCaptchaResponse) error {
	return h.CaptchaHandler.GetCaptcha(ctx, in, out)
}

func (h *captchaHandler) VerifyCaptcha(ctx context.Context, in *CaptVerifyRequest, out *CaptVerifyResponse) error {
	return h.CaptchaHandler.VerifyCaptcha(ctx, in, out)
}
