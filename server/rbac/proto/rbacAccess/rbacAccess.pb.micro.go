// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/rbacAccess.proto

package rbacAccess

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RbacAccess service

func NewRbacAccessEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RbacAccess service

type RbacAccessService interface {
	AccessGet(ctx context.Context, in *AccessGetRequest, opts ...client.CallOption) (*AccessGetResponse, error)
	AccessAdd(ctx context.Context, in *AccessAddRequest, opts ...client.CallOption) (*AccessAddResponse, error)
	AccessUpdate(ctx context.Context, in *AccessUpdateRequest, opts ...client.CallOption) (*AccessUpdateResponse, error)
	AccessDelete(ctx context.Context, in *AccessDeleteRequest, opts ...client.CallOption) (*AccessDeleteResponse, error)
}

type rbacAccessService struct {
	c    client.Client
	name string
}

func NewRbacAccessService(name string, c client.Client) RbacAccessService {
	return &rbacAccessService{
		c:    c,
		name: name,
	}
}

func (c *rbacAccessService) AccessGet(ctx context.Context, in *AccessGetRequest, opts ...client.CallOption) (*AccessGetResponse, error) {
	req := c.c.NewRequest(c.name, "RbacAccess.AccessGet", in)
	out := new(AccessGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacAccessService) AccessAdd(ctx context.Context, in *AccessAddRequest, opts ...client.CallOption) (*AccessAddResponse, error) {
	req := c.c.NewRequest(c.name, "RbacAccess.AccessAdd", in)
	out := new(AccessAddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacAccessService) AccessUpdate(ctx context.Context, in *AccessUpdateRequest, opts ...client.CallOption) (*AccessUpdateResponse, error) {
	req := c.c.NewRequest(c.name, "RbacAccess.AccessUpdate", in)
	out := new(AccessUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacAccessService) AccessDelete(ctx context.Context, in *AccessDeleteRequest, opts ...client.CallOption) (*AccessDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "RbacAccess.AccessDelete", in)
	out := new(AccessDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RbacAccess service

type RbacAccessHandler interface {
	AccessGet(context.Context, *AccessGetRequest, *AccessGetResponse) error
	AccessAdd(context.Context, *AccessAddRequest, *AccessAddResponse) error
	AccessUpdate(context.Context, *AccessUpdateRequest, *AccessUpdateResponse) error
	AccessDelete(context.Context, *AccessDeleteRequest, *AccessDeleteResponse) error
}

func RegisterRbacAccessHandler(s server.Server, hdlr RbacAccessHandler, opts ...server.HandlerOption) error {
	type rbacAccess interface {
		AccessGet(ctx context.Context, in *AccessGetRequest, out *AccessGetResponse) error
		AccessAdd(ctx context.Context, in *AccessAddRequest, out *AccessAddResponse) error
		AccessUpdate(ctx context.Context, in *AccessUpdateRequest, out *AccessUpdateResponse) error
		AccessDelete(ctx context.Context, in *AccessDeleteRequest, out *AccessDeleteResponse) error
	}
	type RbacAccess struct {
		rbacAccess
	}
	h := &rbacAccessHandler{hdlr}
	return s.Handle(s.NewHandler(&RbacAccess{h}, opts...))
}

type rbacAccessHandler struct {
	RbacAccessHandler
}

func (h *rbacAccessHandler) AccessGet(ctx context.Context, in *AccessGetRequest, out *AccessGetResponse) error {
	return h.RbacAccessHandler.AccessGet(ctx, in, out)
}

func (h *rbacAccessHandler) AccessAdd(ctx context.Context, in *AccessAddRequest, out *AccessAddResponse) error {
	return h.RbacAccessHandler.AccessAdd(ctx, in, out)
}

func (h *rbacAccessHandler) AccessUpdate(ctx context.Context, in *AccessUpdateRequest, out *AccessUpdateResponse) error {
	return h.RbacAccessHandler.AccessUpdate(ctx, in, out)
}

func (h *rbacAccessHandler) AccessDelete(ctx context.Context, in *AccessDeleteRequest, out *AccessDeleteResponse) error {
	return h.RbacAccessHandler.AccessDelete(ctx, in, out)
}
